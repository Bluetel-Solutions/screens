<style>

	#yt-player{
		position: fixed;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
	}

</style>
<link rel="stylesheet" href="https://build.origami.ft.com/bundles/css?modules=o-fonts@^1.6.7,o-ft-icons@^2.3.6,o-header,o-grid,o-footer,o-forms,o-colors,o-buttons" />


<div id="yt-player"></div>

<script src="https://www.youtube.com/iframe_api"></script>
<script>

var player = undefined,
	bufferingTO = undefined;

var playerStates = {
		"-1" : "unstarted",
		"0" : "ended",
		"1" : "playing",
		"2" : "paused",
		"3" : "buffering",
		"5" : "cued"
	};

var playerOptions = {
	width: window.innerWidth,
	height: window.innerHeight,
	// videoId: "{{vidID}}",
	events: {
		'onReady': playerReady,
		'onStateChange': playerStateChange,
		'onError' : playerError
	},
	playerVars : {
		controls : 0,
		modestbranding : 1
	}
};

function checkNetworkState(){

	// return 

}

function destroyPlayer(){
	console.log("PLAYER DESTROYED");
	player.destroy();
}

function createPlayer(){
	console.log("PLAYER CREATED");
	player = new YT.Player('yt-player', playerOptions);
}

function onYouTubeIframeAPIReady() {
	createPlayer();
}

function playerReady(evt) {
	// evt.target.playVideo();
	player.loadPlaylist({playlist : "{{vidID}}"});
}

function playerStateChange(evt){

	console.log(playerStates[evt.data]);

	if(playerStates[evt.data] === "buffering"){
	
		bufferingTO = setTimeout(function(){
			
			if(playerStates[player.getPlayerState()] === "buffering"){

				destroyPlayer();
				createPlayer();
				clearTimeout(bufferingTO);
				bufferingTO = undefined;

			}

		}, 10000);
	
	} else if(bufferingTO !== undefined){
		clearTimeout(bufferingTO);
		bufferingTO = undefined;
	}

}

function playerError(errCode){

	console.log(errCode);

	var errors = {
		"-1" : {
			shortReason : "unstarted",
			longReason : "Something has gone wrong with the player. It likely can't access the video resource on the network"
		},
		"2" : {
			shortReason : "invalidparameter",
			longReason : "The request contains an invalid parameter value."
		},
		"5" : {
			shortReason : "html-error",
			longReason : "The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred."
		},
		"100" : {
			shortReason : "no-video",
			longReason : "This error occurs when a video has been removed (for any reason) or has been marked as private."
		},
		"101" : {
			shortReason : "no-embed",
			longReason : "The owner of the requested video does not allow it to be played in embedded players."
		},
		"105" : {
			shortReason : "no-embed",
			longReason : "The owner of the requested video does not allow it to be played in embedded players."
		}
	
	}

	if (errors[errCode].shortReason === "html-error" || errors[errCode].shortReason === "unstarted"){

		console.log(errors[errCode].longReason);

		//Check network status, if connected -> restart - if not -> handle gracefully, alert admin 

		destroyPlayer();
		createPlayer();

	}

}

</script>