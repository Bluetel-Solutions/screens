<link rel="stylesheet" href="https://origami-build.ft.com/bundles/css?modules=o-fonts@^1.6.7,o-ft-icons@^2.3.6" />
<style>

	body, html {
		width: 100%;
		height: 100%;
		margin: 0;
		padding: 0;
		background-color: #FFF1E0;
		font-family: metricweb;
		overflow:hidden;
		display: flex;
		align-content: center;
		justify-content: center;
		align-items: center;
		justify-items: center;
		flex-direction: column;
	}

	div {
		width: 100%;
		font-size: 30px;
		flex: 0 0 auto;
	}

	#ticker1 {
		font-size: 50vh;
	}

	li {
		float:left;
		padding-right: 2em;
	}

</style>

<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-alpha1/jquery.min.js'></script>

<script>
/* global jQuery */
'use strict';
(function ($){

	$.fn.ticker = function(options) {
		var settings = jQuery.extend({
			pxpersec: 150
		}, options);
		if (this.length !== 1) throw "Ticker can only be attached to a single element";
		if (this.children('ul').length !== 1) throw "Ticker container must contain a UL, eg <div id='ticker'><ul></ul></div>";
		return new $.ticker(this, settings);
	};

	$.ticker = function(el, settings) {

		var addqueue = [];
		var removequeue = [];
		var numSegs;
		var updatecount = 0;
		var segWidth = 0;
		var tapeWidth = 0;
		var isscrolling = false;

		var elcont = el;
		var eltape = el.children().first();
		eltape.css({"margin":0, "padding":0, "listStyleType":'none', "whiteSpace":'nowrap', "oTransition":'transform 0s linear', "webkitTransition":'transform 0s linear', "mozTransition":'transform 0s linear', "transition":'transform 0s linear'});
		elcont.css({overflow:'hidden', userSelect:'none', pointerEvents:'none'});
		if (!elcont.css('float') || elcont.css('float') === 'none') {
			elcont.css('display', 'block');
		}

		if (eltape.children('li').length) initTape();


		/* Private methods */

		function initTape() {

			numSegs = 1;

			// Mark each message in the list
			if (!eltape.children('li').length) throw "Cannot initialise ticker: Nothing in it";
			eltape.children('li').addClass('seg1').attr('seg', 1).each(function() {
				if (!$(this).attr('id')) $(this).attr('id', 'msg'+Math.ceil(Math.random()*99999999));
			});

			// Apply transition CSS to the tape
			isscrolling = true;
			updatecount = 1;
			eltape.bind('webkitTransitionEnd', slide);
			eltape.bind('oTransitionEnd', slide);
			eltape.bind('mozTransitionEnd', slide);
			eltape.bind('transitionEnd', slide);
			slide();
		}

		function slide(e) {
			var widths;
			var contWidth = elcont.width();

			// Copy each segment over the one preceding it
			if (updatecount) {
				if (numSegs > 1) {
					for (var i=(numSegs-1); i>=1; i--) {
						eltape.find('.seg'+(i+1)).remove();
						eltape.find('.seg'+i).clone().removeClass('seg'+i).removeAttr('id').addClass('seg'+(i+1)).attr('seg', (i+1)).insertBefore(eltape.find('.seg'+i).first());
					}
				}

				// If the ticker is now empty, delete all shadow segments and stop
				if (eltape.find('.empty').length) {
					eltape.unbind().css({webkitTransitionDuration:'0s'}).children().remove();
					isscrolling = 0;
					return;
				}

				// Add or remove segments as necessary
				widths = calcWidths();
				if (widths.total < (contWidth+widths.seg1)) {
					var content = eltape.children('.seg'+numSegs);
					content = content.clone().removeAttr('id').removeClass('seg'+numSegs);
					if (!widths['seg'+numSegs]) throw "Ticker is zero-width";
					var numrequired = Math.ceil((contWidth+widths.seg1-widths.total)/widths['seg'+numSegs]);
					for (var i=1; i<=numrequired; i++) {
						numSegs++;
						eltape.prepend(content.clone().addClass('seg'+numSegs).attr('seg',numSegs));
						widths['seg'+numSegs] = widths['seg'+(numSegs-1)];
						widths.total += widths['seg'+numSegs];
					}
				}
				if (widths.total > (contWidth+(widths.seg1*2))) {
					eltape.find('.seg'+numSegs).remove();
					numSegs--;
					widths.total -= widths['seg'+(numSegs+1)];
					delete widths['seg'+(numSegs+1)];
				}

				segWidth = widths.seg1;
				tapeWidth = widths.total;
				eltape.width(widths.total);
				updatecount--;
			}

			// Modify the last segment to add/remove queued elements
			if (removequeue.length || addqueue.length) {
				if (removequeue.length) {
					for (var remidx=removequeue.length-1; remidx>=0; remidx--) {
						$(removequeue[remidx]).remove();
					}
					removequeue = [];

					// If master segment is now zero-width, add a .empty message that is the width of the parent container
					if (!eltape.find('.seg1').length) $('<li class="seg1 empty"></li>').width(elcont.width()).appendTo(eltape);
				}
				if (addqueue.length) {
					for (var addidx=addqueue.length-1; addidx>=0; addidx--) {
						$(addqueue[addidx]).addClass('seg1').attr('seg', 1).appendTo(eltape);
					}
					addqueue = [];

					// Remove any .empty messages
					eltape.find('.seg1').filter('.empty').remove();
				}

				// Recalculate widths
				widths = calcWidths();
				segWidth = widths.seg1;
				tapeWidth = widths.total;
				eltape.width(widths.total);

				// Start cascade
				updatecount = numSegs;
			}

			// Reposition the tape to move the last segment just off the right side of the screen
			eltape.css({"webkitTransitionDuration":'0s', "mozTransitionDuration":'0s', "oTransitionDuration":'0s', "transitionDuration":'0s'});
			eltape.css({transform:'translateX(-'+(tapeWidth-contWidth-segWidth)+'px)'});

			// Commit DOM changes (otherwise the element will still be at right:0 below)
			eltape.offset();

			// Calculate duration of animation to achieve desired speed, resume scrolling
			var dur = Math.floor(segWidth/settings.pxpersec);
			eltape.css({"webkitTransitionDuration":dur+'s', "mozTransitionDuration":dur+'s', "oTransitionDuration":dur+'s', "transitionDuration":dur+'s'});
			eltape.css({transform:'translateX(-'+(tapeWidth-contWidth)+'px)'});
		}

		function calcWidths() {
			var widths = {total:0};
			eltape.children().each(function() {
				if (typeof widths['seg'+$(this).attr('seg')] === 'undefined') widths['seg'+$(this).attr('seg')] = 0;
				widths['seg'+$(this).attr('seg')] += $(this).outerWidth();
				widths.total += $(this).outerWidth();
			});
			return widths;
		}


		/* Public methods */

		// Add a new item to the ticker.  Pass a reference to an LI that is to be added to the ticker
		this.addMsg = function(el) {
			if (typeof el === 'string') el = $('<li>'+el+'</li>');
			if (!el.attr('id')) el.attr('id', 'msg'+Math.ceil(Math.random()*99999999));
			if (isscrolling) {
				addqueue.push(el);
			} else {
				eltape.append(el);
			}
			return el.attr('id');
		};

		// Remove an item from the ticker.  Pass a reference to an LI in segment 1.
		this.removeMsg = function(el) {
			if (typeof el === 'string') el = $('#'+el);
			removequeue.push(el);
		};

		// Start if not already running
		this.start = function() {
			if (!isscrolling) initTape();
		};

		// Report current status of ticker
		this.isScrolling = function() {
			return (isscrolling === true);
		};
	};
})(jQuery);
</script>

<script>
	/* global $ */
	'use strict';
	var ticker;

	$.ajaxSetup({cache:false,dataType:'jsonp',callback:'callback'});

   	$(function() {
   		var qs = parseParams();

		ticker = $('#ticker1').ticker();

		qs.forEach(function(param) {
			if (param[0] === 'msg' && param[1]) ticker.addMsg(param[1]);
			if (param[0] === 'src' && param[1]) {
				var loadStories = createFeedLoader(param[1]);
				loadStories();
				setInterval(loadStories, 60000);
			}
		});

		if (!ticker.isScrolling()) {
			ticker.start();
		}
	});

	function parseParams() {
		var params = [], tmp = [];
		location.search.substr(1).split("&")
			.forEach(function (item) {
				tmp = item.split("=");
				params.push( [tmp[0], decodeURIComponent(tmp[1])] );
			});
		return params;
	}

	String.prototype.hashCode = function() {
		var hash = 0, i, chr, len;
		if (this.length === 0) return hash;
		for (i = 0, len = this.length; i < len; i++) {
			chr   = this.charCodeAt(i);
			hash  = ((hash << 5) - hash) + chr;
			hash |= 0; // Convert to 32bit integer
		}
		return hash;
	};

	function createFeedLoader(url) {
		var stories = {};
		return function() {
			var oldstories = stories;
			stories = {};
			$.get('https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=10&q='+url, function(data) {
				if (!data.responseData || !data.responseData.feed || !data.responseData.feed.entries) return;
				console.log('Feed loaded. Item count:', data.responseData.feed.entries.length);
				data.responseData.feed.entries.forEach(function(story) {
					if (!story.id) story.id = story.link.hashCode();
					if (!$('#msg'+story.id).length) {
						console.log('Added', story.title);
						ticker.addMsg($('<li id="msg'+story.id+'">'+story.title+'</li>'));
					}
					if (story.id in oldstories) {
						delete oldstories[story.id];
					}
					stories[story.id] = story;
				});
				Object.keys(oldstories).forEach(function(id) {
					ticker.removeMsg($('#msg'+id));
				});
				if (!ticker.isScrolling()) {
					ticker.start();
				}
			});
		};
	}
</script>

<div id='ticker1' class="ticker">
<ul></ul>
</div>
